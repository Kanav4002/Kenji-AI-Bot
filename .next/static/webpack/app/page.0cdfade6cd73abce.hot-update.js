"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/page.tsx":
/*!**********************!*\
  !*** ./app/page.tsx ***!
  \**********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ChatbotUI)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/navigation */ \"(app-pages-browser)/./node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var _components_Sidebar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/Sidebar */ \"(app-pages-browser)/./app/components/Sidebar.tsx\");\n/* harmony import */ var _components_ChatHeader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/ChatHeader */ \"(app-pages-browser)/./app/components/ChatHeader.tsx\");\n/* harmony import */ var _components_ChatArea__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/ChatArea */ \"(app-pages-browser)/./app/components/ChatArea.tsx\");\n/* harmony import */ var _components_ChatInput__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/ChatInput */ \"(app-pages-browser)/./app/components/ChatInput.tsx\");\n/* harmony import */ var _components_LoginModal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/LoginModal */ \"(app-pages-browser)/./app/components/LoginModal.tsx\");\n/* harmony import */ var _services_ai__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./services/ai */ \"(app-pages-browser)/./app/services/ai.ts\");\n/* harmony import */ var _components_SettingsModal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/SettingsModal */ \"(app-pages-browser)/./app/components/SettingsModal.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n// Mock responses for the chatbot\nconst mockResponses = [\n    \"This AI chatbot has been developed to optimize communication and simplify work processes, ultimately leading to smoother operations.\",\n    \"I've analyzed your request and found the solution you're looking for.\",\n    \"I can help you with that task. Let me show you the most efficient approach.\",\n    \"Based on your input, here's a suggested implementation that should work well.\",\n    \"I've processed your request and have some relevant information to share.\"\n];\n// Sample chats for initial state\nconst sampleChats = [\n    {\n        id: \"chat1\",\n        title: \"Chatbot Introduction\",\n        preview: \"This is an ai chatbot generated for better...\",\n        timestamp: \"Today, 10:30 AM\",\n        messages: [\n            {\n                id: \"1\",\n                content: \"Rephrase 'This is an ai chatbot generated for better communication and simpler work flows'\",\n                isUser: true\n            },\n            {\n                id: \"2\",\n                content: \"This AI chatbot has been developed to optimize communication and simplify work processes, ultimately leading to smoother operations.\",\n                isUser: false\n            },\n            {\n                id: \"3\",\n                content: \"Thank You :)\",\n                isUser: true\n            }\n        ]\n    },\n    {\n        id: \"chat2\",\n        title: \"Code Help\",\n        preview: \"How do I fix this React component?\",\n        timestamp: \"Yesterday, 3:45 PM\",\n        messages: [\n            {\n                id: \"1\",\n                content: \"How do I fix this React component that's not rendering properly?\",\n                isUser: true\n            },\n            {\n                id: \"2\",\n                content: \"Let's debug your React component. The most common issues are usually related to state management or missing key props. Could you share the component code?\",\n                isUser: false\n            }\n        ]\n    },\n    {\n        id: \"chat3\",\n        title: \"Marketing Ideas\",\n        preview: \"Need copy for our new product launch\",\n        timestamp: \"Jan 15, 2023\",\n        messages: [\n            {\n                id: \"1\",\n                content: \"I need help writing marketing copy for our new product launch\",\n                isUser: true\n            },\n            {\n                id: \"2\",\n                content: \"I'd be happy to help with your marketing copy. To create effective copy for your product launch, I'll need some details about your product, target audience, and key selling points.\",\n                isUser: false\n            }\n        ]\n    },\n    {\n        id: \"prompt1\",\n        title: \"Rephrase text...\",\n        preview: \"Rephrase this text in a more professional tone\",\n        timestamp: \"Sample prompt\",\n        messages: [\n            {\n                id: \"1\",\n                content: \"Rephrase this text in a more professional tone: 'Hey team, just wanted to let you know that we're gonna be a bit late with the project, stuff came up, sorry!'\",\n                isUser: true\n            }\n        ]\n    },\n    {\n        id: \"prompt2\",\n        title: \"Fix this code ne...\",\n        preview: \"Fix this code and explain the issues\",\n        timestamp: \"Sample prompt\",\n        messages: [\n            {\n                id: \"1\",\n                content: \"Fix this code and explain the issues:\\n\\nfunction getData() {\\n  fetch('https://api.example.com/data')\\n  .then(response => {\\n    return response.json();\\n  })\\n  .then(data => {\\n    console.log(data);\\n  })\\n}\",\n                isUser: true\n            }\n        ]\n    },\n    {\n        id: \"prompt3\",\n        title: \"Sample Copy for...\",\n        preview: \"Generate marketing copy for a new product\",\n        timestamp: \"Sample prompt\",\n        messages: [\n            {\n                id: \"1\",\n                content: \"Generate marketing copy for a new smart home security system that includes AI-powered cameras, motion sensors, and mobile app control.\",\n                isUser: true\n            }\n        ]\n    }\n];\n// Simulate a user database\nconst userDatabase = {};\nfunction ChatbotUI() {\n    _s();\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [filteredMessages, setFilteredMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [searchQuery, setSearchQuery] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [darkMode, setDarkMode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isLoggedIn, setIsLoggedIn] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [currentUser, setCurrentUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isAuthModalOpen, setIsAuthModalOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [chats, setChats] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(sampleChats);\n    const [currentChatId, setCurrentChatId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isSettingsModalOpen, setIsSettingsModalOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [themeMode, setThemeMode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"system\");\n    const [profileImage, setProfileImage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    // Initialize with saved data\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ChatbotUI.useEffect\": ()=>{\n            // Check for saved login\n            const savedUser = localStorage.getItem('chatbot_user');\n            if (savedUser) {\n                try {\n                    const parsedUser = JSON.parse(savedUser);\n                    setCurrentUser(parsedUser);\n                    setIsLoggedIn(true);\n                    if (parsedUser.profileImage) {\n                        setProfileImage(parsedUser.profileImage);\n                    }\n                } catch (e) {\n                    console.error('Failed to parse saved user', e);\n                    localStorage.removeItem('chatbot_user');\n                }\n            }\n            // Load chat history from localStorage if available\n            const savedChats = localStorage.getItem('chatbot_chats');\n            if (savedChats) {\n                try {\n                    const parsedChats = JSON.parse(savedChats);\n                    setChats(parsedChats);\n                } catch (e) {\n                    console.error('Failed to parse saved chats', e);\n                }\n            }\n            // Set default chat to first one if available\n            if (sampleChats.length > 0) {\n                setCurrentChatId(sampleChats[0].id);\n                setMessages(sampleChats[0].messages);\n                setFilteredMessages(sampleChats[0].messages);\n            }\n        }\n    }[\"ChatbotUI.useEffect\"], []);\n    // Save chats to localStorage when they change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ChatbotUI.useEffect\": ()=>{\n            localStorage.setItem('chatbot_chats', JSON.stringify(chats));\n        }\n    }[\"ChatbotUI.useEffect\"], [\n        chats\n    ]);\n    // Function to select a chat\n    const handleSelectChat = (chatId)=>{\n        setCurrentChatId(chatId);\n        const selectedChat = chats.find((chat)=>chat.id === chatId);\n        if (selectedChat) {\n            setMessages(selectedChat.messages);\n            setFilteredMessages(selectedChat.messages);\n        }\n    };\n    // Function to handle sending new messages\n    const handleSendMessage = async (content)=>{\n        const newUserMessage = {\n            id: Date.now().toString(),\n            content,\n            isUser: true\n        };\n        const updatedMessages = [\n            ...messages,\n            newUserMessage\n        ];\n        setMessages(updatedMessages);\n        // Update the current chat with the new message\n        if (currentChatId) {\n            updateChatWithMessages(currentChatId, updatedMessages);\n        } else {\n            // Create a new chat if there isn't a current one\n            const newChatId = \"chat_\".concat(Date.now());\n            const newChat = {\n                id: newChatId,\n                title: content.slice(0, 30) + (content.length > 30 ? '...' : ''),\n                preview: content,\n                timestamp: formatTimestamp(new Date()),\n                messages: [\n                    newUserMessage\n                ]\n            };\n            setChats([\n                newChat,\n                ...chats\n            ]);\n            setCurrentChatId(newChatId);\n        }\n        // Get AI response\n        try {\n            // Convert messages to the format expected by the AI API\n            const messageHistory = updatedMessages.map((msg)=>({\n                    role: msg.isUser ? \"user\" : \"assistant\",\n                    content: msg.content\n                }));\n            // Add a loading message\n            const loadingMessage = {\n                id: \"loading_\".concat(Date.now()),\n                content: \"Thinking...\",\n                isUser: false\n            };\n            setMessages([\n                ...updatedMessages,\n                loadingMessage\n            ]);\n            // Call the AI API\n            const aiResponse = await (0,_services_ai__WEBPACK_IMPORTED_MODULE_8__.getAIResponse)(messageHistory);\n            // Remove loading message and add AI response\n            const newAIMessage = {\n                id: Date.now().toString(),\n                content: aiResponse,\n                isUser: false\n            };\n            const messagesWithResponse = [\n                ...updatedMessages,\n                newAIMessage\n            ];\n            setMessages(messagesWithResponse);\n            // Update chat with AI response\n            if (currentChatId) {\n                updateChatWithMessages(currentChatId, messagesWithResponse);\n            }\n        } catch (error) {\n            console.error(\"Error getting AI response:\", error);\n            // Remove loading message and add error message\n            const errorMessage = {\n                id: Date.now().toString(),\n                content: \"Sorry, there was an error processing your request. Please try again.\",\n                isUser: false\n            };\n            const messagesWithError = [\n                ...updatedMessages,\n                errorMessage\n            ];\n            setMessages(messagesWithError);\n            if (currentChatId) {\n                updateChatWithMessages(currentChatId, messagesWithError);\n            }\n        }\n    };\n    // Helper function to update a chat with new messages\n    const updateChatWithMessages = (chatId, newMessages)=>{\n        const chatIndex = chats.findIndex((chat)=>chat.id === chatId);\n        if (chatIndex >= 0) {\n            var _newMessages_;\n            const updatedChat = {\n                ...chats[chatIndex],\n                messages: newMessages,\n                preview: ((_newMessages_ = newMessages[newMessages.length - 1]) === null || _newMessages_ === void 0 ? void 0 : _newMessages_.content.slice(0, 40)) + '...',\n                timestamp: formatTimestamp(new Date())\n            };\n            const updatedChats = [\n                ...chats\n            ];\n            updatedChats[chatIndex] = updatedChat;\n            // Move this chat to the top\n            if (chatIndex > 0) {\n                updatedChats.splice(chatIndex, 1);\n                updatedChats.unshift(updatedChat);\n            }\n            setChats(updatedChats);\n        }\n    };\n    // Helper function to format timestamps\n    const formatTimestamp = (date)=>{\n        const now = new Date();\n        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n        const yesterday = new Date(today);\n        yesterday.setDate(yesterday.getDate() - 1);\n        if (date >= today) {\n            return \"Today, \".concat(date.toLocaleTimeString([], {\n                hour: '2-digit',\n                minute: '2-digit'\n            }));\n        } else if (date >= yesterday) {\n            return \"Yesterday, \".concat(date.toLocaleTimeString([], {\n                hour: '2-digit',\n                minute: '2-digit'\n            }));\n        } else {\n            return date.toLocaleDateString([], {\n                month: 'short',\n                day: 'numeric',\n                year: 'numeric'\n            });\n        }\n    };\n    // Function to handle copying message content\n    const handleCopyMessage = (content)=>{\n        navigator.clipboard.writeText(content).then(()=>{\n            console.log(\"Message copied to clipboard\");\n        }).catch((err)=>{\n            console.error(\"Failed to copy: \", err);\n        });\n    };\n    // Function to clear the chat\n    const handleClearChat = ()=>{\n        if (currentChatId) {\n            // Remove this chat from the list\n            const updatedChats = chats.filter((chat)=>chat.id !== currentChatId);\n            setChats(updatedChats);\n            // Set current chat to the first one or null\n            if (updatedChats.length > 0) {\n                setCurrentChatId(updatedChats[0].id);\n                setMessages(updatedChats[0].messages);\n                setFilteredMessages(updatedChats[0].messages);\n            } else {\n                setCurrentChatId(null);\n                setMessages([]);\n                setFilteredMessages([]);\n            }\n        }\n    };\n    // Function to start a new chat\n    const handleNewChat = ()=>{\n        const newChatId = \"chat_\".concat(Date.now());\n        const newChat = {\n            id: newChatId,\n            title: \"New Conversation\",\n            preview: \"Start a new conversation...\",\n            timestamp: formatTimestamp(new Date()),\n            messages: []\n        };\n        setChats([\n            newChat,\n            ...chats\n        ]);\n        setCurrentChatId(newChatId);\n        setMessages([]);\n        setFilteredMessages([]);\n    };\n    // Function to handle search\n    const handleSearch = (query)=>{\n        setSearchQuery(query);\n        if (query.trim() === \"\") {\n            setFilteredMessages(messages);\n        } else {\n            const filtered = messages.filter((message)=>message.content.toLowerCase().includes(query.toLowerCase()));\n            setFilteredMessages(filtered);\n        }\n    };\n    // Function to toggle theme\n    const toggleTheme = ()=>{\n        setDarkMode(!darkMode);\n    };\n    // Function to handle login\n    const handleLogin = (username, password)=>{\n        // Check if user exists\n        const user = Object.values(userDatabase).find((user)=>user.username === username);\n        if (user) {\n            // In a real app, you would verify password hash here\n            setCurrentUser(user);\n            setIsLoggedIn(true);\n            setIsAuthModalOpen(false);\n            // Save login info to localStorage (in a real app, you'd use secure HTTP-only cookies)\n            localStorage.setItem('chatbot_user', JSON.stringify(user));\n            // Notify user\n            const welcomeMessage = {\n                id: Date.now().toString(),\n                content: \"Welcome back, \".concat(username, \"! You've successfully signed in.\"),\n                isUser: false\n            };\n            setMessages((prev)=>[\n                    ...prev,\n                    welcomeMessage\n                ]);\n            // Update current chat with welcome message\n            if (currentChatId) {\n                const currentMessages = [\n                    ...messages,\n                    welcomeMessage\n                ];\n                updateChatWithMessages(currentChatId, currentMessages);\n            }\n        } else {\n            // Show error in the modal\n            alert(\"User not found. Please sign up first.\");\n        }\n    };\n    // Function to handle signup\n    const handleSignup = (username, email, password)=>{\n        // Check if username already exists\n        if (Object.values(userDatabase).some((user)=>user.username === username)) {\n            alert(\"Username already exists. Please choose a different one.\");\n            return;\n        }\n        // Validate username format\n        const usernameRegex = /^[a-zA-Z0-9_]+$/;\n        if (!usernameRegex.test(username)) {\n            alert(\"Username can only contain letters, numbers, and underscores\");\n            return;\n        }\n        // Validate password requirements\n        const hasNumber = /\\d/.test(password);\n        const hasSpecial = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n        const hasLength = password.length >= 8;\n        if (!hasLength || !hasNumber || !hasSpecial) {\n            alert(\"Password must be at least 8 characters and include numbers and special characters\");\n            return;\n        }\n        // In a real app, you would hash the password and call your backend API\n        const newUser = {\n            username,\n            email\n        };\n        userDatabase[username] = newUser;\n        // Log the user in\n        setCurrentUser(newUser);\n        setIsLoggedIn(true);\n        setIsAuthModalOpen(false);\n        // Save login info to localStorage\n        localStorage.setItem('chatbot_user', JSON.stringify(newUser));\n        // Welcome message\n        const welcomeMessage = {\n            id: Date.now().toString(),\n            content: \"Welcome, \".concat(username, \"! Your account has been created successfully.\"),\n            isUser: false\n        };\n        const updatedMessages = [\n            ...messages,\n            welcomeMessage\n        ];\n        setMessages(updatedMessages);\n        // Update current chat with welcome message or create a new one\n        if (currentChatId) {\n            updateChatWithMessages(currentChatId, updatedMessages);\n        } else {\n            handleNewChat();\n        }\n    };\n    // Function to handle logout\n    const handleLogout = ()=>{\n        setIsLoggedIn(false);\n        setCurrentUser(null);\n        localStorage.removeItem('chatbot_user');\n        // Logout message\n        const logoutMessage = {\n            id: Date.now().toString(),\n            content: \"You have been logged out successfully.\",\n            isUser: false\n        };\n        const updatedMessages = [\n            ...messages,\n            logoutMessage\n        ];\n        setMessages(updatedMessages);\n        // Update current chat with logout message\n        if (currentChatId) {\n            updateChatWithMessages(currentChatId, updatedMessages);\n        }\n    };\n    // Update filtered messages when messages change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ChatbotUI.useEffect\": ()=>{\n            if (searchQuery.trim() === \"\") {\n                setFilteredMessages(messages);\n            } else {\n                handleSearch(searchQuery);\n            }\n        }\n    }[\"ChatbotUI.useEffect\"], [\n        messages,\n        searchQuery\n    ]);\n    // Function to handle theme change\n    const handleThemeChange = (mode)=>{\n        setThemeMode(mode);\n        if (mode === \"system\") {\n            const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n            setDarkMode(prefersDark);\n        } else {\n            setDarkMode(mode === \"dark\");\n        }\n    };\n    // Function to update profile\n    const handleUpdateProfile = (data)=>{\n        if (currentUser) {\n            const updatedUser = {\n                ...currentUser,\n                username: data.name || currentUser.username,\n                email: data.email || currentUser.email,\n                phoneNumber: data.phoneNumber,\n                profileImage: data.profileImage !== undefined ? data.profileImage : profileImage\n            };\n            setCurrentUser(updatedUser);\n            if (data.profileImage !== undefined) {\n                setProfileImage(data.profileImage);\n            }\n            // Save to localStorage\n            localStorage.setItem('chatbot_user', JSON.stringify(updatedUser));\n        }\n    };\n    // Function to delete account\n    const handleDeleteAccount = ()=>{\n        // Delete account logic\n        setIsLoggedIn(false);\n        setCurrentUser(null);\n        localStorage.removeItem('chatbot_user');\n        localStorage.removeItem('chatbot_chats');\n        setChats([]);\n        setMessages([]);\n        setIsSettingsModalOpen(false);\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex h-screen \".concat(darkMode ? 'bg-gray-900' : 'bg-white'),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Sidebar__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                onNewChat: handleNewChat,\n                isLoggedIn: isLoggedIn,\n                onOpenAuthModal: ()=>setIsAuthModalOpen(true),\n                onLogout: handleLogout,\n                onOpenSettings: ()=>setIsSettingsModalOpen(true),\n                darkMode: darkMode,\n                username: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.username) || \"\",\n                recentChats: chats,\n                onSelectChat: handleSelectChat,\n                currentChatId: currentChatId,\n                profileImage: profileImage\n            }, void 0, false, {\n                fileName: \"/Users/kanavkumar/Desktop/Projects/ai-chat-bot/app/page.tsx\",\n                lineNumber: 573,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex-1 flex flex-col transition-all duration-300\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ChatHeader__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                        onClearChat: handleClearChat,\n                        onSearch: handleSearch,\n                        darkMode: darkMode,\n                        onToggleTheme: toggleTheme\n                    }, void 0, false, {\n                        fileName: \"/Users/kanavkumar/Desktop/Projects/ai-chat-bot/app/page.tsx\",\n                        lineNumber: 590,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ChatArea__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                        messages: filteredMessages,\n                        onCopyMessage: handleCopyMessage,\n                        darkMode: darkMode,\n                        userProfileImage: profileImage\n                    }, void 0, false, {\n                        fileName: \"/Users/kanavkumar/Desktop/Projects/ai-chat-bot/app/page.tsx\",\n                        lineNumber: 598,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ChatInput__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                        onSendMessage: handleSendMessage,\n                        darkMode: darkMode\n                    }, void 0, false, {\n                        fileName: \"/Users/kanavkumar/Desktop/Projects/ai-chat-bot/app/page.tsx\",\n                        lineNumber: 606,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/kanavkumar/Desktop/Projects/ai-chat-bot/app/page.tsx\",\n                lineNumber: 588,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_LoginModal__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                isOpen: isAuthModalOpen,\n                onClose: ()=>setIsAuthModalOpen(false),\n                onLogin: handleLogin,\n                onSignup: handleSignup,\n                darkMode: darkMode\n            }, void 0, false, {\n                fileName: \"/Users/kanavkumar/Desktop/Projects/ai-chat-bot/app/page.tsx\",\n                lineNumber: 613,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_SettingsModal__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                isOpen: isSettingsModalOpen,\n                onClose: ()=>setIsSettingsModalOpen(false),\n                darkMode: darkMode,\n                onToggleTheme: handleThemeChange,\n                currentUser: currentUser,\n                onUpdateProfile: handleUpdateProfile,\n                onDeleteAllChats: ()=>{\n                    setChats([]);\n                    setMessages([]);\n                    localStorage.removeItem('chatbot_chats');\n                },\n                onDeleteAccount: handleDeleteAccount,\n                onLogout: handleLogout,\n                profileImage: profileImage,\n                setProfileImage: setProfileImage\n            }, void 0, false, {\n                fileName: \"/Users/kanavkumar/Desktop/Projects/ai-chat-bot/app/page.tsx\",\n                lineNumber: 622,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/kanavkumar/Desktop/Projects/ai-chat-bot/app/page.tsx\",\n        lineNumber: 571,\n        columnNumber: 5\n    }, this);\n}\n_s(ChatbotUI, \"KBJAJN2qLckq03xgz9ACi4UPt1o=\", false, function() {\n    return [\n        next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter\n    ];\n});\n_c = ChatbotUI;\nvar _c;\n$RefreshReg$(_c, \"ChatbotUI\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/page.tsx\n"));

/***/ })

});